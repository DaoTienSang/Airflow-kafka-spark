import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from kafka import KafkaConsumer
import json
from datetime import datetime
import time

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Stock Market Analysis Dashboard",
    page_icon="üìà",
    layout="wide"
)

# Thi·∫øt l·∫≠p style cho seaborn
sns.set(style="darkgrid")
plt.rcParams.update({'font.size': 10})

# H√†m ƒë·ªÉ k·∫øt n·ªëi v√† l·∫•y d·ªØ li·ªáu t·ª´ Kafka
@st.cache_resource
def get_kafka_consumer():
    consumer = KafkaConsumer(
        'stock-processed-topic',  # ƒê·ªçc t·ª´ topic ƒë√£ x·ª≠ l√Ω
        bootstrap_servers=['kafka:9092'],
        auto_offset_reset='earliest',
        enable_auto_commit=True,
        group_id='streamlit-consumer',
        value_deserializer=lambda x: json.loads(x.decode('utf-8')),
        # TƒÉng th·ªùi gian ch·ªù v√† s·ªë l∆∞·ª£ng records l·∫•y m·ªói l·∫ßn poll
        fetch_max_bytes=52428800,  # TƒÉng k√≠ch th∆∞·ªõc fetch l√™n 50MB
        max_partition_fetch_bytes=10485760  # TƒÉng l√™n 10MB m·ªói partition
    )
    return consumer

# H√†m ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Kafka v√† chuy·ªÉn th√†nh DataFrame
def process_kafka_data(max_messages=10000, timeout=300):
    consumer = get_kafka_consumer()
    
    messages = []
    start_time = time.time()
    unique_symbols = set()
    
    # Ki·ªÉm tra s·ªë l∆∞·ª£ng symbols duy nh·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªçc ƒë·ªß 100 m√£
    target_symbols = 100  # M·ª•c ti√™u l√† c√≥ 100 m√£ c·ªï phi·∫øu
    
    st.info("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Kafka...vui l√≤ng ch·ªù (~2-3 ph√∫t)")
    progress_bar = st.progress(0)
    
    # Poll cho ƒë·∫øn khi c√≥ ƒë·ªß 100 m√£ ho·∫∑c h·∫øt th·ªùi gian ch·ªù
    while len(unique_symbols) < target_symbols and time.time() - start_time < timeout and len(messages) < max_messages:
        msg_pack = consumer.poll(timeout_ms=10000, max_records=1000)
        
        if not msg_pack:
            # N·∫øu kh√¥ng c√≥ messages m·ªõi, ch·ªù m·ªôt ch√∫t v√† th·ª≠ l·∫°i
            time.sleep(1)
            continue
            
        for _, msgs in msg_pack.items():
            for msg in msgs:
                messages.append(msg.value)
                symbol = msg.value.get('symbol')
                if symbol:
                    unique_symbols.add(symbol)
                
                # C·∫≠p nh·∫≠t progress bar
                if len(unique_symbols) > 0:
                    progress_percent = min(len(unique_symbols) / target_symbols, 1.0)
                    progress_bar.progress(progress_percent)
                    
                if len(messages) >= max_messages:
                    break
        
        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng symbol ƒë√£ nh·∫≠n ƒë∆∞·ª£c
        st.info(f"ƒê√£ nh·∫≠n d·ªØ li·ªáu c·ªßa {len(unique_symbols)}/{target_symbols} m√£ c·ªï phi·∫øu. Ti·∫øp t·ª•c ch·ªù...")
    
    progress_bar.empty()
    
    if not messages:
        st.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Kafka")
        return None, None
    
    # Hi·ªÉn th·ªã th√¥ng tin s·ªë l∆∞·ª£ng m√£ c·ªï phi·∫øu nh·∫≠n ƒë∆∞·ª£c
    st.success(f"ƒê√£ nh·∫≠n d·ªØ li·ªáu c·ªßa {len(unique_symbols)} m√£ c·ªï phi·∫øu: {', '.join(sorted(list(unique_symbols)))}")
    
    # X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Kafka
    stock_data = {}
    
    for msg in messages:
        symbol = msg.get('symbol')
        
        if symbol:
            if symbol not in stock_data:
                stock_data[symbol] = []
            
            # Th√™m d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o dict
            stock_data[symbol].append({
                'date': msg.get('time'),
                'open': msg.get('open'),
                'high': msg.get('high'),
                'low': msg.get('low'),
                'close': msg.get('close'),
                'volume': msg.get('volume'),
                'current_price': msg.get('current_price'),
                'ma5': msg.get('ma5'),
                'ma20': msg.get('ma20'),
                'rsi': msg.get('rsi'),
                'macd_line': msg.get('macd_line'),
                'macd_signal': msg.get('macd_signal'),
                'macd_histogram': msg.get('macd_histogram'),
                'suggestion': msg.get('suggestion'),
                'reason': msg.get('reason')
            })
    
    # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
    dataframes = {}
    current_prices = {}
    for symbol, data in stock_data.items():
        if data:
            df = pd.DataFrame(data)
            df['date'] = pd.to_datetime(df['date'])
            df = df.sort_values('date')
            
            # L∆∞u gi√° hi·ªán t·∫°i
            if not df.empty and 'current_price' in df.columns:
                current_prices[symbol] = df['current_price'].iloc[-1]
            
            dataframes[symbol] = df
    
    return dataframes, current_prices

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì b·∫±ng seaborn
def plot_seaborn_charts(df, symbol):
    # ƒê·∫£m b·∫£o c·ªôt date c√≥ ƒë·ªãnh d·∫°ng datetime ƒë√∫ng
    df = df.copy()
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'])
    
    # T·∫°o figure v·ªõi k√≠ch th∆∞·ªõc l·ªõn
    fig, axes = plt.subplots(4, 1, figsize=(14, 16), gridspec_kw={'height_ratios': [3, 1, 1, 1]})
    
    # 1. Bi·ªÉu ƒë·ªì gi√° v√† MA
    ax1 = axes[0]
    # V·∫Ω bi·ªÉu ƒë·ªì gi√° ƒë√≥ng c·ª≠a
    sns.lineplot(x=df['date'].values, y='close', data=df, color='black', label='Gi√° ƒë√≥ng c·ª≠a', ax=ax1)
    
    # V·∫Ω MA5 v√† MA20
    if 'ma5' in df.columns and df['ma5'].notna().any():
        sns.lineplot(x=df['date'].values, y='ma5', data=df, color='blue', label='MA5', ax=ax1)
    
    if 'ma20' in df.columns and df['ma20'].notna().any():
        sns.lineplot(x=df['date'].values, y='ma20', data=df, color='red', label='MA20', ax=ax1)
    
    ax1.set_title(f"{symbol} - Bi·ªÉu ƒë·ªì gi√°", fontsize=15)
    ax1.set_ylabel('Gi√°', fontsize=12)
    ax1.tick_params(axis='x', rotation=30)
    ax1.legend()
    
    # 2. Bi·ªÉu ƒë·ªì Volume
    ax2 = axes[1]
    # D√πng lineplot thay v√¨ barplot cho volume theo y√™u c·∫ßu
    sns.lineplot(x=df['date'].values, y='volume', data=df, color='blue', label='Volume', ax=ax2)
    ax2.set_title('Volume', fontsize=12)
    ax2.set_ylabel('Volume', fontsize=10)
    ax2.tick_params(axis='x', rotation=45, labelsize=8)
    ax2.fill_between(df['date'].values, df['volume'], alpha=0.2, color='blue')
    # Hi·ªÉn th·ªã grid ƒë·ªÉ d·ªÖ ƒë·ªçc gi√° tr·ªã
    ax2.grid(True, alpha=0.3)
    
    # 3. Bi·ªÉu ƒë·ªì MACD
    ax3 = axes[2]
    if all(col in df.columns for col in ['macd_line', 'macd_signal']) and df['macd_line'].notna().any():
        sns.lineplot(x=df['date'].values, y='macd_line', data=df, color='blue', label='MACD Line', ax=ax3)
        sns.lineplot(x=df['date'].values, y='macd_signal', data=df, color='red', label='Signal Line', ax=ax3)
        
        # V·∫Ω histogram b·∫±ng c√°ch d√πng lineplot v√† fill_between
        if 'macd_histogram' in df.columns and df['macd_histogram'].notna().any():
            # T·∫°o baseline ·ªü y=0
            ax3.axhline(y=0, color='gray', linestyle='--', alpha=0.5)
            
            # V·∫Ω ƒë∆∞·ªùng histogram
            sns.lineplot(x=df['date'].values, y='macd_histogram', data=df, color='green', alpha=0.5, ax=ax3, label='Histogram')
            
            # T√¥ m√†u v√πng tr√™n v√† d∆∞·ªõi 0
            positive_hist = df.copy()
            negative_hist = df.copy()
            positive_hist.loc[positive_hist['macd_histogram'] <= 0, 'macd_histogram'] = 0
            negative_hist.loc[negative_hist['macd_histogram'] >= 0, 'macd_histogram'] = 0
            
            # T√¥ m√†u v√πng d∆∞∆°ng
            ax3.fill_between(positive_hist['date'].values, 0, positive_hist['macd_histogram'], 
                           alpha=0.3, color='green', label='Positive')
            
            # T√¥ m√†u v√πng √¢m
            ax3.fill_between(negative_hist['date'].values, 0, negative_hist['macd_histogram'], 
                           alpha=0.3, color='red', label='Negative')
    
    ax3.set_title('MACD', fontsize=12)
    ax3.set_ylabel('Value', fontsize=10)
    ax3.tick_params(axis='x', rotation=45, labelsize=8)
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # 4. Bi·ªÉu ƒë·ªì RSI
    ax4 = axes[3]
    if 'rsi' in df.columns and df['rsi'].notna().any():
        sns.lineplot(x=df['date'].values, y='rsi', data=df, color='purple', label='RSI', ax=ax4)
        
        # Th√™m ƒë∆∞·ªùng tham chi·∫øu 70 v√† 30
        ax4.axhline(y=70, color='red', linestyle='--', alpha=0.7)
        ax4.axhline(y=30, color='green', linestyle='--', alpha=0.7)
        
        # T√¥ m√†u v√πng qu√° mua v√† qu√° b√°n
        ax4.fill_between(df['date'].values, 70, 100, alpha=0.1, color='red', label='Overbought')
        ax4.fill_between(df['date'].values, 0, 30, alpha=0.1, color='green', label='Oversold')
    
    ax4.set_title('RSI', fontsize=12)
    ax4.set_ylabel('RSI', fontsize=10)
    ax4.tick_params(axis='x', rotation=45, labelsize=8)
    ax4.set_ylim(0, 100)  # RSI t·ª´ 0-100
    ax4.grid(True, alpha=0.3)
    ax4.legend()
    
    # ƒêi·ªÅu ch·ªânh kh√¥ng gian gi·ªØa c√°c subplots
    plt.tight_layout()
    
    return fig

# Th√™m h√†m v·∫Ω bi·ªÉu ƒë·ªì d·ª± ph√≤ng s·ª≠ d·ª•ng matplotlib tr·ª±c ti·∫øp
def plot_matplotlib_charts(df, symbol):
    if df.empty:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì")
        return None

    # ƒê·∫£m b·∫£o c·ªôt date c√≥ ƒë·ªãnh d·∫°ng datetime ƒë√∫ng
    df = df.copy()
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'])
    
    # T·∫°o figure v·ªõi k√≠ch th∆∞·ªõc l·ªõn
    fig, axes = plt.subplots(4, 1, figsize=(14, 16), gridspec_kw={'height_ratios': [3, 1, 1, 1]})
    
    # 1. Bi·ªÉu ƒë·ªì gi√° v√† MA
    ax1 = axes[0]
    ax1.plot(df['date'], df['close'], color='black', label='Gi√° ƒë√≥ng c·ª≠a')
    
    # V·∫Ω MA5 v√† MA20
    if 'ma5' in df.columns and df['ma5'].notna().any():
        ax1.plot(df['date'], df['ma5'], color='blue', label='MA5')
    
    if 'ma20' in df.columns and df['ma20'].notna().any():
        ax1.plot(df['date'], df['ma20'], color='red', label='MA20')
    
    ax1.set_title(f"{symbol} - Bi·ªÉu ƒë·ªì gi√°", fontsize=15)
    ax1.set_ylabel('Gi√°', fontsize=12)
    ax1.tick_params(axis='x', rotation=30)
    ax1.legend()
    
    # 2. Bi·ªÉu ƒë·ªì Volume
    ax2 = axes[1]
    ax2.plot(df['date'], df['volume'], color='blue', label='Volume')
    ax2.fill_between(df['date'], df['volume'], alpha=0.2, color='blue')
    ax2.set_title('Volume', fontsize=12)
    ax2.set_ylabel('Volume', fontsize=10)
    ax2.tick_params(axis='x', rotation=45, labelsize=8)
    ax2.grid(True, alpha=0.3)
    
    # 3. Bi·ªÉu ƒë·ªì MACD
    ax3 = axes[2]
    if all(col in df.columns for col in ['macd_line', 'macd_signal']) and df['macd_line'].notna().any():
        ax3.plot(df['date'], df['macd_line'], color='blue', label='MACD Line')
        ax3.plot(df['date'], df['macd_signal'], color='red', label='Signal Line')
        
        # V·∫Ω histogram b·∫±ng c√°ch d√πng fill_between
        if 'macd_histogram' in df.columns and df['macd_histogram'].notna().any():
            # T·∫°o baseline ·ªü y=0
            ax3.axhline(y=0, color='gray', linestyle='--', alpha=0.5)
            
            # T√¥ m√†u v√πng tr√™n v√† d∆∞·ªõi 0
            positive_mask = df['macd_histogram'] > 0
            negative_mask = df['macd_histogram'] <= 0
            
            # T√¥ m√†u v√πng d∆∞∆°ng v√† √¢m
            ax3.fill_between(df.loc[positive_mask, 'date'], 0, df.loc[positive_mask, 'macd_histogram'], 
                           alpha=0.3, color='green', label='Positive')
            ax3.fill_between(df.loc[negative_mask, 'date'], 0, df.loc[negative_mask, 'macd_histogram'], 
                           alpha=0.3, color='red', label='Negative')
    
    ax3.set_title('MACD', fontsize=12)
    ax3.set_ylabel('Value', fontsize=10)
    ax3.tick_params(axis='x', rotation=45, labelsize=8)
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # 4. Bi·ªÉu ƒë·ªì RSI
    ax4 = axes[3]
    if 'rsi' in df.columns and df['rsi'].notna().any():
        ax4.plot(df['date'], df['rsi'], color='purple', label='RSI')
        
        # Th√™m ƒë∆∞·ªùng tham chi·∫øu 70 v√† 30
        ax4.axhline(y=70, color='red', linestyle='--', alpha=0.7)
        ax4.axhline(y=30, color='green', linestyle='--', alpha=0.7)
        
        # T√¥ m√†u v√πng qu√° mua v√† qu√° b√°n
        ax4.fill_between(df['date'], 70, 100, alpha=0.1, color='red', label='Overbought')
        ax4.fill_between(df['date'], 0, 30, alpha=0.1, color='green', label='Oversold')
    
    ax4.set_title('RSI', fontsize=12)
    ax4.set_ylabel('RSI', fontsize=10)
    ax4.tick_params(axis='x', rotation=45, labelsize=8)
    ax4.set_ylim(0, 100)  # RSI t·ª´ 0-100
    ax4.grid(True, alpha=0.3)
    ax4.legend()
    
    # ƒêi·ªÅu ch·ªânh kh√¥ng gian gi·ªØa c√°c subplots
    plt.tight_layout()
    
    return fig

# Giao di·ªán ch√≠nh
st.title("üìä Stock Market Technical Analysis Dashboard")

# Hi·ªÉn th·ªã loading spinner
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
    stock_dataframes, current_prices = process_kafka_data()

if stock_dataframes:
    # Sidebar ƒë·ªÉ ch·ªçn m√£ c·ªï phi·∫øu
    stocks = list(stock_dataframes.keys())
    selected_stock = st.sidebar.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", stocks)
    
    if selected_stock and selected_stock in stock_dataframes:
        st.header(f"{selected_stock} - Ph√¢n t√≠ch k·ªπ thu·∫≠t")
        
        # Hi·ªÉn th·ªã gi√° hi·ªán t·∫°i
        if selected_stock in current_prices:
            st.metric(
                label="Gi√° hi·ªán t·∫°i", 
                value=f"{current_prices[selected_stock]:,.2f} VND"
            )
        
        # L·∫•y DataFrame cho c·ªï phi·∫øu ƒë√£ ch·ªçn
        df = stock_dataframes[selected_stock]
        
        # Th·ª≠ v·∫Ω bi·ªÉu ƒë·ªì b·∫±ng seaborn, n·∫øu l·ªói th√¨ d√πng matplotlib
        try:
            seaborn_chart = plot_seaborn_charts(df, selected_stock)
            st.pyplot(seaborn_chart)
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì b·∫±ng Seaborn: {str(e)}")
            try:
                matplotlib_chart = plot_matplotlib_charts(df, selected_stock)
                st.pyplot(matplotlib_chart)
            except Exception as e2:
                st.error(f"Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì: {str(e2)}")
        
        # Th√™m th√¥ng tin t√≥m t·∫Øt
        with st.expander("Chi ti·∫øt d·ªØ li·ªáu"):
            st.dataframe(df)
        
        # L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
        if not df.empty:
            last_row = df.iloc[-1]
            
            # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t trong expander
            with st.expander("ƒê·ªÅ xu·∫•t ƒë·∫ßu t∆∞", expanded=True):
                suggestion = last_row.get('suggestion', 'KH√îNG C√ì ƒê·ªÄ XU·∫§T')
                reason = last_row.get('reason', 'Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu')
                
                # ƒê·∫∑t m√†u cho ƒë·ªÅ xu·∫•t
                if 'BUY' in suggestion:
                    suggestion_color = 'green'
                elif 'SELL' in suggestion:
                    suggestion_color = 'red'
                else:
                    suggestion_color = 'orange'
                    
                # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t
                st.markdown(f"<h3 style='color: {suggestion_color};'>{suggestion}</h3>", unsafe_allow_html=True)
                st.write(reason)
                
                # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t m·ªõi nh·∫•t
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    ma5_value = last_row.get('ma5', 'N/A')
                    if ma5_value != 'N/A':
                        st.metric(label="MA5", value=f"{ma5_value:.2f}")
                    else:
                        st.metric(label="MA5", value="N/A")
                
                with col2:
                    ma20_value = last_row.get('ma20', 'N/A')
                    if ma20_value != 'N/A':
                        st.metric(label="MA20", value=f"{ma20_value:.2f}")
                    else:
                        st.metric(label="MA20", value="N/A")
                
                with col3:
                    rsi_value = last_row.get('rsi', 'N/A')
                    if rsi_value != 'N/A':
                        if rsi_value > 70:
                            st.metric(label="RSI (Qu√° mua > 70)", value=f"{rsi_value:.2f}")
                        elif rsi_value < 30:
                            st.metric(label="RSI (Qu√° b√°n < 30)", value=f"{rsi_value:.2f}")
                        else:
                            st.metric(label="RSI", value=f"{rsi_value:.2f}")
                    else:
                        st.metric(label="RSI", value="N/A")
                
                with col4:
                    macd = last_row.get('macd_line', 'N/A')
                    signal = last_row.get('macd_signal', 'N/A')
                    
                    if macd != 'N/A' and signal != 'N/A':
                        diff = macd - signal
                        # S·ª≠a l·ªói delta_color, ch·ªâ d√πng c√°c gi√° tr·ªã h·ª£p l·ªá: 'normal', 'inverse' ho·∫∑c 'off'
                        delta_color = "normal" if diff > 0 else "inverse"
                        st.metric(
                            label="MACD", 
                            value=f"{macd:.4f}", 
                            delta=f"{diff:.4f}", 
                            delta_color=delta_color
                        )
                    else:
                        st.metric(label="MACD", value="N/A")
    else:
        st.warning("Vui l√≤ng ch·ªçn m·ªôt m√£ c·ªï phi·∫øu t·ª´ sidebar.")
else:
    st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Kafka ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng ƒë·∫£m b·∫£o c√°c services ƒëang ch·∫°y v√† c√≥ d·ªØ li·ªáu trong topic.")
    
    # Th√™m button ƒë·ªÉ th·ª≠ l·∫°i
    if st.button("Th·ª≠ l·∫°i"):
        st.experimental_rerun()

# Hi·ªÉn th·ªã th√¥ng tin ·ª©ng d·ª•ng
st.sidebar.markdown("---")
st.sidebar.info(
    """
    **V·ªÅ ·ª©ng d·ª•ng**  
    Dashboard tr·ª±c quan h√≥a d·ªØ li·ªáu c·ªï phi·∫øu v√† ph√¢n t√≠ch k·ªπ thu·∫≠t.
    """
) 