version: "3.8"

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: always

  airflow-webserver:
    build: .
    image: custom-airflow
    container_name: airflow-webserver
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__SECRET_KEY: 9fTV3z34RmPnXZBLwPDsx8XkTDnxmHkesJ1ECmTuuQo
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
    command: webserver

  airflow-scheduler:
    build: .
    image: custom-airflow
    container_name: airflow-scheduler
    depends_on:
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: 9fTV3z34RmPnXZBLwPDsx8XkTDnxmHkesJ1ECmTuuQo
    volumes:
      - ./dags:/opt/airflow/dags
    command: scheduler

  airflow-init:
    build: .
    image: custom-airflow
    container_name: airflow-init
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: 9fTV3z34RmPnXZBLwPDsx8XkTDnxmHkesJ1ECmTuuQo
    entrypoint: /bin/bash
    command: -c "airflow db migrate && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: airflow-zookeeper-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: airflow-kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-setup:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka-setup
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # Block until Kafka is ready
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Tạo Kafka topics...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic stock-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic stock-history-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic stock-processed-topic --replication-factor 1 --partitions 1
      
      echo -e 'Các topics đã sẵn sàng!'
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8180:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=stock-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - kafka-setup

  spark:
    build:
      context: ../spark
    image: stock-spark-analysis
    container_name: spark-stock-analysis
    command: ["/opt/spark/bin/spark-submit", "--packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0", "--master", "local[*]", "stock_analysis.py"]
    depends_on:
      - kafka
      - kafka-setup
    environment:
      - SPARK_MASTER=local[*]
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
    volumes:
      - ../spark:/app
    ports:
      - "4041:4040"  # Spark UI
      
  streamlit:
    build:
      context: ../streamlit
    image: stock-streamlit
    container_name: streamlit-dashboard
    depends_on:
      - kafka
      - spark
    ports:
      - "8501:8501"
    volumes:
      - ../streamlit:/app
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=stock-processed-topic

volumes:
  postgres-db-volume:
